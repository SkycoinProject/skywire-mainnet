// Code generated by "esc -o static.go -prefix static static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "static/index.html",
		size:    5825,
		modtime: 1594811593,
		compressed: `
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
`,
	},

	"/": {
		name:  "/",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/index.html"],
	},
}
